/**
 * TollGuru Calculator
 * TollGuru Calculator API  # Authentication  <!-- ReDoc-Inject: <security-definitions> -->
 *
 * OpenAPI spec version: 2020-05-31T17:48:12Z
 * Contact: eng@tollguru.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 */

import ApiClient from "../ApiClient";
import Body1 from '../model/Body1';
import InlineResponse2001 from '../model/InlineResponse2001';
import SyncResponse from '../model/SyncResponse';

/**
* GPSTracestracks service.
* @module api/GPSTracestracksApi
* @version 2020-05-31T17:48:12Z
*/
export default class GPSTracestracksApi {

    /**
    * Constructs a new GPSTracestracksApi. 
    * @alias module:api/GPSTracestracksApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }

    /**
     * Callback function to receive the result of the routeDownloadPost operation.
     * @callback module:api/GPSTracestracksApi~routeDownloadPostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/SyncResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Download Async Results
     * The results will be available for download for upto 30 days by calling the API.
     * @param {Object} opts Optional parameters
     * @param {module:api/GPSTracestracksApi~routeDownloadPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/SyncResponse}
     */
    routeDownloadPost(opts, callback) {
      opts = opts || {};
      let postBody = opts['body'];

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = SyncResponse;

      return this.apiClient.callApi(
        '/route/download', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the routeUploadPost operation.
     * @callback module:api/GPSTracestracksApi~routeUploadPostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse2001} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Request
     * &lt;p&gt;This API can be used in synchronous and asynchronous modes. The default mode of operation is synchronous mode where the API response with toll information is returned immediately.&lt;/p&gt;&lt;p&gt;Asynchronous mode is used in the following cases: &lt;/p&gt;&lt;ul&gt; &lt;li&gt;Bulk upload of multiple GPS tracks files&lt;/li&gt;&lt;li&gt;Uploading large GPS tracks files&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;In asynchronous mode, the response is returned immediately with a &lt;code&gt;requestId&lt;/code&gt; and &lt;code&gt;requestedTimestamp&lt;/code&gt;. The results will be available for download for upto 30 days by calling the &lt;code&gt;route/download&lt;/code&gt; API. Asynchronous mode can used by specifying the url parameter &lt;code&gt;isAsync&#x3D;true&lt;/code&gt;.&lt;/p&gt;&lt;p&gt;GPS traces can be passed in the following format &lt;/p&gt;&lt;ul&gt; &lt;li&gt;Upload CSV file&lt;/li&gt;&lt;li&gt;Upload kml file&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;The first line in the CSV needs to contain the attribute names. The subsequent lines needs to contain the data in temporal order. The following parameters are available:&lt;/p&gt;&lt;table&gt;&lt;thead&gt;&lt;tr&gt;&lt;th&gt;Parameter&lt;/th&gt;&lt;th&gt;Description&lt;/th&gt;&lt;/tr&gt;&lt;/thead&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td&gt;&lt;strong&gt;latitude&lt;/strong&gt;&lt;/td&gt;&lt;td&gt;Latitude coordinate in WGS84 degree (mandatory)&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;&lt;strong&gt;longitude&lt;/strong&gt;&lt;/td&gt;&lt;td&gt;Longitude coordinate in WGS84 degree (mandatory)&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;&lt;strong&gt;timestamp&lt;/strong&gt;&lt;/td&gt;&lt;td&gt;indicates the time and date, for example&amp;nbsp;&amp;nbsp;2018-05-21T17:05:06Z (mandatory since tolls may change based on time)&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;&lt;strong&gt;speed_mps&lt;/strong&gt;&lt;/td&gt;&lt;td&gt;speed in meters per second (optional)&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;&lt;strong&gt;speed_mph&lt;/strong&gt;&lt;/td&gt;&lt;td&gt;speed in miles per hour (optional)&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;&lt;strong&gt;speed_kmh&lt;/strong&gt;&lt;/td&gt;&lt;td&gt;speed in kilometers per hour (optional)&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;&lt;strong&gt;heading&lt;/strong&gt;&lt;/td&gt;&lt;td&gt;heading in degrees clockwise from North (optional)&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;p&gt;You can download sample file from &lt;a href&#x3D;\&quot;https://tollguru-cdn.s3.us-east-2.amazonaws.com/trip_route.csv\&quot; target&#x3D;\&quot;_blank\&quot;&gt;here&lt;/a&gt;&lt;/p&gt;&lt;p&gt;Or use the CSV format file as shown in the table below:&lt;/p&gt;&lt;table&gt; &lt;tr&gt; &lt;th&gt;latitude&lt;/th&gt; &lt;th&gt;longitude&lt;/th&gt; &lt;th&gt;timestamp&lt;/th&gt; &lt;/tr&gt;&lt;tr&gt; &lt;td style&#x3D;\&quot;text-align: center;\&quot;&gt;38.90479&lt;/td&gt;&lt;td style&#x3D;\&quot;text-align: center;\&quot;&gt;-77.02607&lt;/td&gt;&lt;td style&#x3D;\&quot;text-align: center;\&quot;&gt;2019-12-16T15:45:23Z&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt; &lt;td style&#x3D;\&quot;text-align: center;\&quot;&gt;38.90479&lt;/td&gt;&lt;td style&#x3D;\&quot;text-align: center;\&quot;&gt;-77.02606&lt;/td&gt;&lt;td style&#x3D;\&quot;text-align: center;\&quot;&gt;2019-12-16T15:47:24Z&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt; &lt;td style&#x3D;\&quot;text-align: center;\&quot;&gt;38.9048&lt;/td&gt;&lt;td style&#x3D;\&quot;text-align: center;\&quot;&gt;-77.02608&lt;/td&gt;&lt;td style&#x3D;\&quot;text-align: center;\&quot;&gt;2019-12-16T15:49:25Z&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt; &lt;td style&#x3D;\&quot;text-align: center;\&quot;&gt;38.9044&lt;/td&gt;&lt;td style&#x3D;\&quot;text-align: center;\&quot;&gt;-77.02604&lt;/td&gt;&lt;td style&#x3D;\&quot;text-align: center;\&quot;&gt;2019-12-16T15:50:42Z&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt; &lt;td style&#x3D;\&quot;text-align: center;\&quot;&gt;38.90424&lt;/td&gt;&lt;td style&#x3D;\&quot;text-align: center;\&quot;&gt;-77.02646&lt;/td&gt;&lt;td style&#x3D;\&quot;text-align: center;\&quot;&gt;2019-12-16T15:50:49Z&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt; &lt;td style&#x3D;\&quot;text-align: center;\&quot;&gt;38.90422&lt;/td&gt;&lt;td style&#x3D;\&quot;text-align: center;\&quot;&gt;-77.02686&lt;/td&gt;&lt;td style&#x3D;\&quot;text-align: center;\&quot;&gt;2019-12-16T15:50:55Z&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
     * @param {Object} opts Optional parameters
     * @param {module:api/GPSTracestracksApi~routeUploadPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/InlineResponse2001}
     */
    routeUploadPost(vehicleType, opts, callback) {
      opts = opts || {};
      let postBody = opts['body'];

      let pathParams = {
      };
      let queryParams = {
        'vehicleType': vehicleType,
        'vehicleName': opts['vehicleName'],
        'height': opts['height'],
        'weight': opts['weight'],
        'isAsync': opts['isAsync']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['text/csv'];
      let accepts = ['application/json'];
      let returnType = InlineResponse2001;

      return this.apiClient.callApi(
        '/route/upload', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

}
