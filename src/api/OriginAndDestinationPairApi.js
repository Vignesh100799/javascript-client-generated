/**
 * TollGuru Calculator
 * TollGuru Calculator API  # Authentication  <!-- ReDoc-Inject: <security-definitions> -->
 *
 * OpenAPI spec version: 2020-05-31T17:48:12Z
 * Contact: eng@tollguru.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 */

import ApiClient from "../ApiClient";
import GmapRequestBody from '../model/GmapRequestBody';
import GmapResponse from '../model/GmapResponse';
import HereRequestBody from '../model/HereRequestBody';
import HereResponse from '../model/HereResponse';

/**
* OriginAndDestinationPair service.
* @module api/OriginAndDestinationPairApi
* @version 2020-05-31T17:48:12Z
*/
export default class OriginAndDestinationPairApi {

    /**
    * Constructs a new OriginAndDestinationPairApi. 
    * @alias module:api/OriginAndDestinationPairApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }

    /**
     * Callback function to receive the result of the gmapsPost operation.
     * @callback module:api/OriginAndDestinationPairApi~gmapsPostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GmapResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Google Maps Routes
     * HTTP Request for cars, SUVs, pick-ups, motorcycles
     * @param {Object} opts Optional parameters
     * @param {module:api/OriginAndDestinationPairApi~gmapsPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GmapResponse}
     */
    gmapsPost(opts, callback) {
      opts = opts || {};
      let postBody = opts['body'];

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['authorizer'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = GmapResponse;

      return this.apiClient.callApi(
        '/gmaps', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the herePost operation.
     * @callback module:api/OriginAndDestinationPairApi~herePostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/HereResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * HERE Maps Routes
     * &lt;p&gt;HTTP Request for trucks, buses, RVs, cars, SUV, pick-ups, motorcycles&lt;/p&gt;&lt;p&gt;For trucks you should specify truck weight, wherever possible. Some bridges and tunnels restrict trucks based on weight. If you are transporting HAZMAT material, please specify material type. If you do not specify HAZMAT restrictions and weight restrictions, none will be applied.&lt;/p&gt;
     * @param {Object} opts Optional parameters
     * @param {module:api/OriginAndDestinationPairApi~herePostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/HereResponse}
     */
    herePost(opts, callback) {
      opts = opts || {};
      let postBody = opts['body'];

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['authorizer'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = HereResponse;

      return this.apiClient.callApi(
        '/here', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

}
