/**
 * TollGuru Calculator
 * TollGuru Calculator API  # Authentication  <!-- ReDoc-Inject: <security-definitions> -->
 *
 * OpenAPI spec version: 2020-05-31T17:48:12Z
 * Contact: eng@tollguru.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
* The Cost model module.
* @module model/Cost
* @version 2020-05-31T17:48:12Z
*/
export default class Cost {
    /**
    * Constructs a new <code>Cost</code>.
    * &lt;p&gt;Costs object summarizes the toll cost and the fuel cost for the route.The fuel costs calculated from fuel efficiency (city fuel effiency and highway fuel efficiency) and the speeds on each leg of the route.&lt;/p&gt;&lt;p&gt;The tolls are added for all the tolls on the route for each payment type. If a payment type cannot be using on all the toll points on the route, the toll cost is returned as false. Else, the sum of tolls for the payment type is returned.&lt;/p&gt;&lt;p&gt;The tolls are returned for the following payment types:&lt;/p&gt;&lt;ul&gt; &lt;li&gt;Cash&lt;/li&gt;&lt;li&gt;Transponder&lt;/li&gt;&lt;li&gt;License Plate&lt;/li&gt;&lt;li&gt;Credit card&lt;/li&gt;&lt;li&gt;Prepaid pass&lt;/li&gt;&lt;/ul&gt;
    * @alias module:model/Cost
    * @class
    */

    constructor() {
        
        
        
    }

    /**
    * Constructs a <code>Cost</code> from a plain JavaScript object, optionally creating a new instance.
    * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
    * @param {Object} data The plain JavaScript object bearing properties of interest.
    * @param {module:model/Cost} obj Optional instance to populate.
    * @return {module:model/Cost} The populated <code>Cost</code> instance.
    */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Cost();
                        
            
            if (data.hasOwnProperty('fuel')) {
                obj['fuel'] = ApiClient.convertToType(data['fuel'], 'Number');
            }
            if (data.hasOwnProperty('otherCost')) {
                obj['otherCost'] = ApiClient.convertToType(data['otherCost'], 'Number');
            }
            if (data.hasOwnProperty('tag')) {
                obj['tag'] = ApiClient.convertToType(data['tag'], 'Number');
            }
            if (data.hasOwnProperty('cash')) {
                obj['cash'] = ApiClient.convertToType(data['cash'], 'Number');
            }
            if (data.hasOwnProperty('licensePlate')) {
                obj['licensePlate'] = ApiClient.convertToType(data['licensePlate'], 'Number');
            }
            if (data.hasOwnProperty('creditCard')) {
                obj['creditCard'] = ApiClient.convertToType(data['creditCard'], 'Number');
            }
            if (data.hasOwnProperty('prepaidCard')) {
                obj['prepaidCard'] = ApiClient.convertToType(data['prepaidCard'], 'Number');
            }
        }
        return obj;
    }

    /**
    * @member {Number} fuel
    */
    'fuel' = undefined;
    /**
    * @member {Number} otherCost
    */
    'otherCost' = undefined;
    /**
    * @member {Number} tag
    */
    'tag' = undefined;
    /**
    * @member {Number} cash
    */
    'cash' = undefined;
    /**
    * @member {Number} licensePlate
    */
    'licensePlate' = undefined;
    /**
    * @member {Number} creditCard
    */
    'creditCard' = undefined;
    /**
    * @member {Number} prepaidCard
    */
    'prepaidCard' = undefined;




}
