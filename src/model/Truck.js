/**
 * TollGuru Calculator
 * TollGuru Calculator API  # Authentication  <!-- ReDoc-Inject: <security-definitions> -->
 *
 * OpenAPI spec version: 2020-05-31T17:48:12Z
 * Contact: eng@tollguru.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
* The Truck model module.
* @module model/Truck
* @version 2020-05-31T17:48:12Z
*/
export default class Truck {
    /**
    * Constructs a new <code>Truck</code>.
    * @alias module:model/Truck
    * @class
    */

    constructor() {
        
        
        
    }

    /**
    * Constructs a <code>Truck</code> from a plain JavaScript object, optionally creating a new instance.
    * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
    * @param {Object} data The plain JavaScript object bearing properties of interest.
    * @param {module:model/Truck} obj Optional instance to populate.
    * @return {module:model/Truck} The populated <code>Truck</code> instance.
    */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Truck();
                        
            
            if (data.hasOwnProperty('truckType')) {
                obj['truckType'] = ApiClient.convertToType(data['truckType'], 'String');
            }
            if (data.hasOwnProperty('trailersCount')) {
                obj['trailersCount'] = ApiClient.convertToType(data['trailersCount'], 'Number');
            }
            if (data.hasOwnProperty('shippedHazardousGoods')) {
                obj['shippedHazardousGoods'] = ApiClient.convertToType(data['shippedHazardousGoods'], 'String');
            }
            if (data.hasOwnProperty('limitedWeight')) {
                obj['limitedWeight'] = ApiClient.convertToType(data['limitedWeight'], 'Number');
            }
            if (data.hasOwnProperty('weightPerAxle')) {
                obj['weightPerAxle'] = ApiClient.convertToType(data['weightPerAxle'], 'Number');
            }
            if (data.hasOwnProperty('height')) {
                obj['height'] = ApiClient.convertToType(data['height'], 'Number');
            }
            if (data.hasOwnProperty('width')) {
                obj['width'] = ApiClient.convertToType(data['width'], 'Number');
            }
            if (data.hasOwnProperty('length')) {
                obj['length'] = ApiClient.convertToType(data['length'], 'Number');
            }
            if (data.hasOwnProperty('tunnelCategory')) {
                obj['tunnelCategory'] = ApiClient.convertToType(data['tunnelCategory'], 'String');
            }
            if (data.hasOwnProperty('truckRestrictionPenalty')) {
                obj['truckRestrictionPenalty'] = ApiClient.convertToType(data['truckRestrictionPenalty'], 'String');
            }
        }
        return obj;
    }

    /**
    * Specifies the vehicle type<br><strong>Note</strong>: Relevant for restrictions that apply exclusively to tractors with semi-trailers (observed in North America). Such restrictions are taken into account only in case of the <code>truckType</code> set to <code>tractorTruck</code> and the trailers count greater than 0 (for example <code>truckType: \"tractorTruck\", trailersCount: 1</code>). The truck type is irrelevant in case of restrictions common for all types of trucks.
    * @member {module:model/Truck.TruckTypeEnum} truckType
    */
    'truckType' = undefined;
    /**
    * Specifies number of trailers pulled by a vehicle. The provided value must be between 0 and 4.
    * @member {Number} trailersCount
    * @default 0
    */
    'trailersCount' = 0;
    /**
    * List of hazardous materials in the vehicle. The names correspond to <a href=\"https://www.fmcsa.dot.gov/sites/fmcsa.dot.gov/files/docs/Nine_Classes_of_Hazardous_Materials-4-2013_508CLN.pdf\" target=\"_blank\"> HAZMAT classes 1 to 9. <br> For example, explosive is Class 1 and so on. </a>
    * @member {module:model/Truck.ShippedHazardousGoodsEnum} shippedHazardousGoods
    */
    'shippedHazardousGoods' = undefined;
    /**
    * Vehicle weight including trailers and shipped goods, in pounds. <br> If truck weight is not specified, incorrect tolls may be calculated for trucks on Pennsylvania turnpike and other toll locations where tolls are based on weight.
    * @member {Number} limitedWeight
    */
    'limitedWeight' = undefined;
    /**
    * Vehicle weight per axle in pounds. <br> If truck weight is not specified, incorrect tolls may be calculated for trucks on Pennsylvania turnpike and other toll locations where tolls are based on weight.
    * @member {Number} weightPerAxle
    */
    'weightPerAxle' = undefined;
    /**
    * Vehicle height in feet. The provided value must be between 0 and 50. <br> If vehicle height is not specified, incorrect tolls may be calculated on New York Thruway and other toll roads where tolls are based on axles and weight.
    * @member {Number} height
    */
    'height' = undefined;
    /**
    * Vehicle width in feet. The provided value must be between 0 and 50.
    * @member {Number} width
    */
    'width' = undefined;
    /**
    * Vehicle length in feet. The provided value must be between 0 and 300.
    * @member {Number} length
    */
    'length' = undefined;
    /**
    * Specifies the tunnel category to restrict certain route links. The route will pass only through tunnels of a less strict category.
    * @member {module:model/Truck.TunnelCategoryEnum} tunnelCategory
    */
    'tunnelCategory' = undefined;
    /**
    * pecifies the penalty type on violated truck restrictions.<br><code>strict</code>: route will not use links with a violated truck restriction at any circumstances<br><strong>Note</strong>: Route computation will fail and return NoRouteFound if not able to avoid the links with a violated truck restriction and the penalty type is strict.<br><code>soft</code>: route will use links with a violated truck restriction if there is no alternative to avoid them<
    * @member {module:model/Truck.TruckRestrictionPenaltyEnum} truckRestrictionPenalty
    */
    'truckRestrictionPenalty' = undefined;



    /**
    * Allowed values for the <code>truckType</code> property.
    * @enum {String}
    * @readonly
    */
    static TruckTypeEnum = {
        /**
         * value: "truck"
         * @const
         */
        "truck": "truck",
        /**
         * value: "tractorTruck"
         * @const
         */
        "tractorTruck": "tractorTruck"    };
    /**
    * Allowed values for the <code>shippedHazardousGoods</code> property.
    * @enum {String}
    * @readonly
    */
    static ShippedHazardousGoodsEnum = {
        /**
         * value: "explosive"
         * @const
         */
        "explosive": "explosive",
        /**
         * value: "gas"
         * @const
         */
        "gas": "gas",
        /**
         * value: "flammable"
         * @const
         */
        "flammable": "flammable",
        /**
         * value: "combustible"
         * @const
         */
        "combustible": "combustible",
        /**
         * value: "organic"
         * @const
         */
        "organic": "organic",
        /**
         * value: "poison"
         * @const
         */
        "poison": "poison",
        /**
         * value: "radioActive"
         * @const
         */
        "radioActive": "radioActive",
        /**
         * value: "corrosive"
         * @const
         */
        "corrosive": "corrosive",
        /**
         * value: "miscellaneous"
         * @const
         */
        "miscellaneous": "miscellaneous"    };
    /**
    * Allowed values for the <code>tunnelCategory</code> property.
    * @enum {String}
    * @readonly
    */
    static TunnelCategoryEnum = {
        /**
         * value: "B"
         * @const
         */
        "B": "B",
        /**
         * value: "C"
         * @const
         */
        "C": "C",
        /**
         * value: "D"
         * @const
         */
        "D": "D",
        /**
         * value: "E"
         * @const
         */
        "E": "E"    };
    /**
    * Allowed values for the <code>truckRestrictionPenalty</code> property.
    * @enum {String}
    * @readonly
    */
    static TruckRestrictionPenaltyEnum = {
        /**
         * value: "strict"
         * @const
         */
        "strict": "strict",
        /**
         * value: "soft"
         * @const
         */
        "soft": "soft"    };

}
