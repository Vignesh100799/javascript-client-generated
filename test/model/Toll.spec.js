/**
 * TollGuru Calculator
 * TollGuru Calculator API  # Authentication  <!-- ReDoc-Inject: <security-definitions> -->
 *
 * OpenAPI spec version: 2020-05-31T17:48:12Z
 * Contact: eng@tollguru.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 */
(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', '../../src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require('../../src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.TollGuruCalculator);
  }
}(this, function(expect, TollGuruCalculator) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new TollGuruCalculator.Toll();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('Toll', function() {
    it('should create an instance of Toll', function() {
      // uncomment below and update the code to test Toll
      //var instane = new TollGuruCalculator.Toll();
      //expect(instance).to.be.a(TollGuruCalculator.Toll);
    });

    it('should have the property type (base name: "type")', function() {
      // uncomment below and update the code to test the property type
      //var instane = new TollGuruCalculator.Toll();
      //expect(instance).to.be();
    });

    it('should have the property tagCost (base name: "tagCost")', function() {
      // uncomment below and update the code to test the property tagCost
      //var instane = new TollGuruCalculator.Toll();
      //expect(instance).to.be();
    });

    it('should have the property cashCost (base name: "cashCost")', function() {
      // uncomment below and update the code to test the property cashCost
      //var instane = new TollGuruCalculator.Toll();
      //expect(instance).to.be();
    });

    it('should have the property licensePlateCost (base name: "licensePlateCost")', function() {
      // uncomment below and update the code to test the property licensePlateCost
      //var instane = new TollGuruCalculator.Toll();
      //expect(instance).to.be();
    });

    it('should have the property prepaidCardCost (base name: "prepaidCardCost")', function() {
      // uncomment below and update the code to test the property prepaidCardCost
      //var instane = new TollGuruCalculator.Toll();
      //expect(instance).to.be();
    });

    it('should have the property creditCardCost (base name: "creditCardCost")', function() {
      // uncomment below and update the code to test the property creditCardCost
      //var instane = new TollGuruCalculator.Toll();
      //expect(instance).to.be();
    });

    it('should have the property currency (base name: "currency")', function() {
      // uncomment below and update the code to test the property currency
      //var instane = new TollGuruCalculator.Toll();
      //expect(instance).to.be();
    });

    it('should have the property tagPrimary (base name: "tagPrimary")', function() {
      // uncomment below and update the code to test the property tagPrimary
      //var instane = new TollGuruCalculator.Toll();
      //expect(instance).to.be();
    });

    it('should have the property tagSecondary (base name: "tagSecondary")', function() {
      // uncomment below and update the code to test the property tagSecondary
      //var instane = new TollGuruCalculator.Toll();
      //expect(instance).to.be();
    });

    it('should have the property licensePlatePrimary (base name: "licensePlatePrimary")', function() {
      // uncomment below and update the code to test the property licensePlatePrimary
      //var instane = new TollGuruCalculator.Toll();
      //expect(instance).to.be();
    });

    it('should have the property licensePlateSecondary (base name: "licensePlateSecondary")', function() {
      // uncomment below and update the code to test the property licensePlateSecondary
      //var instane = new TollGuruCalculator.Toll();
      //expect(instance).to.be();
    });

    it('should have the property id (base name: "id")', function() {
      // uncomment below and update the code to test the property id
      //var instane = new TollGuruCalculator.Toll();
      //expect(instance).to.be();
    });

    it('should have the property lat (base name: "lat")', function() {
      // uncomment below and update the code to test the property lat
      //var instane = new TollGuruCalculator.Toll();
      //expect(instance).to.be();
    });

    it('should have the property lng (base name: "lng")', function() {
      // uncomment below and update the code to test the property lng
      //var instane = new TollGuruCalculator.Toll();
      //expect(instance).to.be();
    });

    it('should have the property name (base name: "name")', function() {
      // uncomment below and update the code to test the property name
      //var instane = new TollGuruCalculator.Toll();
      //expect(instance).to.be();
    });

    it('should have the property road (base name: "road")', function() {
      // uncomment below and update the code to test the property road
      //var instane = new TollGuruCalculator.Toll();
      //expect(instance).to.be();
    });

    it('should have the property state (base name: "state")', function() {
      // uncomment below and update the code to test the property state
      //var instane = new TollGuruCalculator.Toll();
      //expect(instance).to.be();
    });

  });

}));
